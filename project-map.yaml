files:
  - path: next-env.d.ts
    exports: []
    imports: []
    interfaces: []
    methods: []
    props: []
    purpose: ''
    state: []
    type: module
  - path: next.config.ts
    exports:
      - default:variable
    imports:
      - next:{NextConfig}
    interfaces: []
    methods: []
    props: []
    purpose: ''
    state: []
    type: module
  - path: src/app/audios/mockData.ts
    exports:
      - generateMockAudios:function
      - AudioItem:interface
      - initialMockAudios:variable
    imports: []
    interfaces:
      - AudioItem
    methods:
      - 'generateMockAudios(count: number,startIndex: number = 0)'
    props:
      - count:unknown
      - startIndex:unknown
    purpose: ''
    state: []
    type: module
  - path: src/app/audios/page.tsx
    exports:
      - default:function
    imports:
      - react:{useState,useEffect}
      - '@/components/layout/Layout:{Layout}'
      - '@/components/audio/AudioTile:{AudioTile}'
      - '@/components/audio/AudioTileSkeleton:{AudioTileSkeleton}'
      - ./mockData:{generateMockAudios,initialMockAudios,AudioItem}
    interfaces: []
    methods:
      - AudiosPage()
      - handleLoadMore()
    props: []
    purpose: ''
    state:
      - audios:AudioItem[]
      - loading:unknown
      - loadingMore:unknown
    type: module
  - path: src/app/audios/upload/page.tsx
    exports:
      - default:function
    imports:
      - react:{useState,FormEvent}
      - next/navigation:{useRouter}
      - '@/components/layout/Layout:{Layout}'
      - '@/components/upload/DropZone:{DropZone}'
    interfaces: []
    methods:
      - UploadPage()
      - 'handleFileSelect(selectedFile: File)'
      - validateForm()
      - 'handleSubmit(e: FormEvent)'
      - handleCancel()
    props: []
    purpose: ''
    state:
      - title:unknown
      - file:File | null
      - isSubmitting:unknown
      - titleError:string | null
    type: module
  - path: src/app/globals.css
    exports: []
    imports: []
    purpose: ''
    type: stylesheet
  - path: src/app/layout.tsx
    exports:
      - default:function
      - metadata:variable
    imports:
      - next:{Metadata}
      - next/font/google:{Geist,Geist_Mono}
      - ./globals.css
    interfaces: []
    methods:
      - |-
        RootLayout({
          children,
        }: Readonly<{
          children: React.ReactNode;
        }>)
    props:
      - children:unknown
    purpose: ''
    state: []
    type: module
  - path: src/app/page.tsx
    exports:
      - default:function
    imports:
      - '@/components/layout/Layout:{Layout}'
    interfaces: []
    methods:
      - Home()
    props: []
    purpose: ''
    state: []
    type: module
  - path: src/components/audio/AudioTile.tsx
    exports:
      - default:function
    imports:
      - '@/app/audios/mockData:{AudioItem}'
      - next/link:{Link}
    interfaces:
      - AudioTileProps
    methods:
      - 'formatDate(dateString: string)'
      - 'formatDuration(seconds: number)'
      - 'formatFileSize(bytes: number)'
      - 'AudioTile({ audio }: AudioTileProps)'
    props:
      - audio :unknown
    purpose: ''
    state: []
    type: module
  - path: src/components/audio/AudioTileSkeleton.tsx
    exports:
      - default:function
    imports: []
    interfaces: []
    methods:
      - AudioTileSkeleton()
    props: []
    purpose: ''
    state: []
    type: module
  - path: src/components/layout/Layout.tsx
    exports:
      - default:function
    imports:
      - ./Navbar:{Navbar}
    interfaces:
      - LayoutProps
    methods:
      - 'Layout({ children }: LayoutProps)'
    props:
      - children :unknown
    purpose: ''
    state: []
    type: module
  - path: src/components/layout/Navbar.tsx
    exports:
      - default:function
    imports:
      - next/link:{Link}
    interfaces: []
    methods:
      - Navbar()
    props: []
    purpose: ''
    state: []
    type: module
  - path: src/components/upload/DropZone.tsx
    exports:
      - default:function
    imports:
      - react:{useState,useRef,DragEvent,ChangeEvent}
      - '@/utils/fileUtils:{validateAudioFile,formatFileSize}'
    interfaces:
      - DropZoneProps
    methods:
      - 'DropZone({ onFileSelect, selectedFile }: DropZoneProps)'
      - 'handleDragOver(e: DragEvent<HTMLDivElement>)'
      - 'handleDragLeave(e: DragEvent<HTMLDivElement>)'
      - 'handleDrop(e: DragEvent<HTMLDivElement>)'
      - 'handleFileInputChange(e: ChangeEvent<HTMLInputElement>)'
      - 'validateAndSelectFile(file: File)'
      - handleButtonClick()
    props:
      - onFileSelect:unknown
      - selectedFile :unknown
    purpose: ''
    state:
      - isDragging:unknown
      - error:string | null
    type: module
  - path: src/utils/fileUtils.ts
    exports:
      - validateAudioFile:function
      - formatFileSize:function
      - FileValidationResult:interface
    imports: []
    interfaces:
      - FileValidationResult
    methods:
      - 'validateAudioFile(file: File)'
      - 'formatFileSize(bytes: number)'
    props:
      - file:unknown
      - bytes:unknown
    purpose: ''
    state: []
    type: module
