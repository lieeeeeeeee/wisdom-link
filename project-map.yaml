files:
  - path: next-env.d.ts
    exports: []
    imports: []
    interfaces: []
    methods: []
    props: []
    purpose: ''
    state: []
    type: module
  - path: next.config.ts
    exports:
      - default:variable
    imports:
      - next:{NextConfig}
    interfaces: []
    methods: []
    props: []
    purpose: ''
    state: []
    type: module
  - path: src/app/audios/upload/page.tsx
    exports:
      - default:function
    imports:
      - react:{useState,FormEvent}
      - next/navigation:{useRouter}
      - '@/components/layout/Layout:{Layout}'
      - '@/components/upload/DropZone:{DropZone}'
      - '@/utils/toastUtils:{showErrorToast,showLoadingToast,updateToast}'
      - '@/contexts/AuthContext:{useAuth}'
      - next/link:{Link}
      - '@/utils/supabase:{supabase,AudioFile}'
      - uuid:{v4 as uuidv4}
    interfaces: []
    methods:
      - 'getAudioDuration(file: File)'
      - UploadPage()
      - 'handleFileSelect(selectedFile: File)'
      - validateForm()
      - 'handleSubmit(e: FormEvent)'
      - handleCancel()
    props: []
    purpose: ''
    state:
      - title:unknown
      - file:File | null
      - isSubmitting:unknown
      - titleError:string | null
    type: module
  - path: src/app/globals.css
    exports: []
    imports: []
    purpose: ''
    type: stylesheet
  - path: src/app/layout.tsx
    exports:
      - default:function
      - metadata:variable
    imports:
      - next:{Metadata}
      - next/font/google:{Geist,Geist_Mono}
      - react-hot-toast:{Toaster}
      - ./globals.css
      - '@/contexts/AuthContext:{AuthProvider}'
    interfaces: []
    methods:
      - |-
        RootLayout({
          children,
        }: Readonly<{
          children: React.ReactNode;
        }>)
    props:
      - children:unknown
    purpose: ''
    state: []
    type: module
  - path: src/app/page.tsx
    exports:
      - default:function
    imports:
      - react:{useState,useEffect,useCallback,useRef}
      - '@/components/layout/Layout:{Layout}'
      - '@/components/audio/AudioTile:{AudioTile}'
      - '@/components/audio/AudioTileSkeleton:{AudioTileSkeleton}'
      - '@/contexts/AuthContext:{useAuth}'
      - next/link:{Link}
      - '@/utils/supabase:{supabase,AudioFile}'
      - '@/utils/toastUtils:{showErrorToast}'
    interfaces: []
    methods:
      - HomePage()
      - handleLoadMore()
    props: []
    purpose: ''
    state:
      - audios:AudioFile[]
      - loading:unknown
      - loadingMore:unknown
      - allDataLoaded:unknown
    type: module
  - path: src/app/player/page.tsx
    exports:
      - default:function
    imports:
      - '@/components/layout/Layout:{Layout}'
      - '@/components/audio/AudioPlayer:{AudioPlayer}'
    interfaces: []
    methods:
      - AudioPlayerDemo()
    props: []
    purpose: ''
    state: []
    type: module
  - path: src/app/toast-demo/page.tsx
    exports:
      - default:function
    imports:
      - react:{useState}
      - '@/components/layout/Layout:{Layout}'
      - '@/utils/toastUtils:{showSuccessToast,showErrorToast,showInfoToast,showLoadingToast,updateToast,showCustomToast}'
    interfaces: []
    methods:
      - ToastDemo()
      - handleSuccessToast()
      - handleErrorToast()
      - handleInfoToast()
      - handleLoadingToast()
      - handleCustomToast()
    props: []
    purpose: ''
    state:
      - loadingToastId:string | undefined
    type: module
  - path: src/components/audio/AudioDropDownMenu.tsx
    exports:
      - default:variable
    imports:
      - react:{useCallback,useEffect,useRef}
    interfaces:
      - AudioDropDownMenuProps
    methods:
      - |-
        AudioDropDownMenu({
          isOpen,
          onClose,
          audioUrl,
          audioTitle,
          onChangePlaybackRate,
          currentPlaybackRate,
        }: AudioDropDownMenuProps)
      - 'handleClickOutside(event: MouseEvent)'
    props: []
    purpose: ''
    state: []
    type: module
  - path: src/components/audio/AudioPlayer.tsx
    exports:
      - default:function
    imports:
      - react:{useState,useRef,useEffect,useCallback}
      - ./AudioPlayerControls:{AudioPlayerControls}
    interfaces:
      - AudioPlayerProps
    methods:
      - 'AudioPlayer({ src, title }: AudioPlayerProps)'
    props:
      - src:unknown
      - title :unknown
    purpose: ''
    state:
      - isPlaying:unknown
      - currentTime:unknown
      - audioDuration:unknown
      - playbackRate:unknown
      - isError:unknown
    type: module
  - path: src/components/audio/AudioPlayerControls.tsx
    exports:
      - default:variable
    imports: []
    interfaces:
      - AudioPlayerControlsProps
    methods:
      - 'formatDuration(seconds: number)'
      - |-
        AudioPlayerControls({
          isPlaying,
          currentTime,
          duration,
          onPlayPause,
          onSeek,
          displayDate,
          displaySize
        }: AudioPlayerControlsProps)
    props: []
    purpose: ''
    state: []
    type: module
  - path: src/components/audio/AudioTile.tsx
    exports:
      - default:unknown
    imports:
      - react:{useState,useCallback,memo,useRef,useEffect}
      - '@/utils/supabase:{createSignedAudioUrl,AudioFile}'
      - '@/contexts/AuthContext:{useAuth}'
      - '@/utils/toastUtils:{showInfoToast}'
      - ./AudioDropDownMenu:{AudioDropDownMenu}
      - ./AudioPlayerControls:{AudioPlayerControls}
    interfaces:
      - AudioTileProps
    methods:
      - 'formatDate(dateString: string)'
      - 'formatFileSize(bytes: number)'
      - 'AudioTile({ audio }: AudioTileProps)'
      - fetchAudioUrl()
    props: []
    purpose: ''
    state:
      - audioSrc:string | null
      - isLoadingUrl:unknown
      - errorUrl:string | null
      - isPlaying:unknown
      - currentTime:unknown
      - audioDuration:unknown
      - isMenuOpen:unknown
      - playbackRate:unknown
    type: module
  - path: src/components/audio/AudioTileSkeleton.tsx
    exports:
      - default:function
    imports: []
    interfaces: []
    methods:
      - AudioTileSkeleton()
    props: []
    purpose: ''
    state: []
    type: module
  - path: src/components/auth/LoginButton.tsx
    exports:
      - default:function
    imports:
      - react:{React}
      - '@/contexts/AuthContext:{useAuth}'
    interfaces: []
    methods:
      - LoginButton()
    props: []
    purpose: ''
    state: []
    type: module
  - path: src/components/auth/UserMenu.tsx
    exports:
      - default:function
    imports:
      - react:{useState,useRef,useEffect}
      - next/image:{Image}
      - '@/contexts/AuthContext:{useAuth}'
    interfaces: []
    methods:
      - UserMenu()
      - toggleMenu()
      - 'handleClickOutside(event: MouseEvent)'
    props: []
    purpose: ''
    state:
      - isOpen:unknown
    type: module
  - path: src/components/layout/Layout.tsx
    exports:
      - default:function
    imports:
      - ./Navbar:{Navbar}
    interfaces:
      - LayoutProps
    methods:
      - 'Layout({ children }: LayoutProps)'
    props:
      - children :unknown
    purpose: ''
    state: []
    type: module
  - path: src/components/layout/Navbar.tsx
    exports:
      - default:function
    imports:
      - next/link:{Link}
      - '@/components/auth/LoginButton:{LoginButton}'
      - '@/components/auth/UserMenu:{UserMenu}'
      - '@/contexts/AuthContext:{useAuth}'
    interfaces: []
    methods:
      - Navbar()
    props: []
    purpose: ''
    state: []
    type: module
  - path: src/components/upload/DropZone.tsx
    exports:
      - default:function
    imports:
      - react:{useState,useRef,DragEvent,ChangeEvent}
      - '@/utils/fileUtils:{validateAudioFile,formatFileSize}'
      - '@/utils/toastUtils:{showSuccessToast,showErrorToast}'
    interfaces:
      - DropZoneProps
    methods:
      - 'DropZone({ onFileSelect, selectedFile }: DropZoneProps)'
      - 'handleDragOver(e: DragEvent<HTMLDivElement>)'
      - 'handleDragLeave(e: DragEvent<HTMLDivElement>)'
      - 'handleDrop(e: DragEvent<HTMLDivElement>)'
      - 'handleFileInputChange(e: ChangeEvent<HTMLInputElement>)'
      - 'validateAndSelectFile(file: File)'
      - handleButtonClick()
    props:
      - onFileSelect:unknown
      - selectedFile :unknown
    purpose: ''
    state:
      - isDragging:unknown
      - error:string | null
    type: module
  - path: src/contexts/AuthContext.tsx
    exports:
      - AuthProvider:variable
      - useAuth:variable
    imports:
      - react:{React,createContext,useContext,useEffect,useState,ReactNode}
      - '@supabase/supabase-js:{Session,User}'
      - '@/utils/supabase:{supabase}'
    interfaces:
      - AuthContextType
    methods:
      - 'AuthProvider({ children }: { children: ReactNode })'
      - getSession()
      - signInWithGoogle()
      - signOut()
      - useAuth()
    props:
      - children :unknown
    purpose: ''
    state:
      - session:Session | null
      - user:User | null
      - isLoading:unknown
    type: module
  - path: src/utils/fileUtils.ts
    exports:
      - validateAudioFile:function
      - formatFileSize:function
      - FileValidationResult:interface
    imports: []
    interfaces:
      - FileValidationResult
    methods:
      - 'validateAudioFile(file: File)'
      - 'formatFileSize(bytes: number)'
    props:
      - file:unknown
      - bytes:unknown
    purpose: ''
    state: []
    type: module
  - path: src/utils/supabase.ts
    exports:
      - supabase:variable
      - AudioFile:interface
      - createSignedAudioUrl:variable
    imports:
      - '@supabase/supabase-js:{createClient}'
    interfaces:
      - AudioFile
    methods:
      - 'createSignedAudioUrl(filename: string, expiresInSeconds: number = 60)'
    props:
      - filename:unknown
      - expiresInSeconds:unknown
    purpose: ''
    state: []
    type: module
  - path: src/utils/toastUtils.ts
    exports:
      - showSuccessToast:variable
      - showErrorToast:variable
      - showInfoToast:variable
      - showLoadingToast:variable
      - dismissToast:variable
      - updateToast:variable
      - showCustomToast:variable
    imports:
      - react-hot-toast:{toast,Renderable}
    interfaces: []
    methods:
      - isLocalDevelopment()
      - 'showSuccessToast(message: string)'
      - 'showErrorToast(message: string)'
      - 'showInfoToast(message: string)'
      - 'showLoadingToast(message: string = ''処理中...'')'
      - 'dismissToast(toastId: string | undefined)'
      - |-
        updateToast(
          toastId: string | undefined,
          type: 'success' | 'error',
          message: string
        )
      - |-
        showCustomToast(
          message: string,
          options?: {
            icon?: Renderable;
            style?: React.CSSProperties;
            duration?: number;
          }
        )
    props:
      - message:unknown
      - toastId:unknown
      - type:unknown
      - options?:unknown
    purpose: ''
    state: []
    type: module
